name "rover_deployments"

############################################################# Included libraries

# Sensors
using_task_library 'imu_stim300'
using_task_library 'vicon'
using_task_library 'gnss_trimble'
using_task_library 'camera_bb2'
using_task_library 'camera_bb3'
using_task_library 'camera_firewire'
using_task_library 'tofcamera_mesasr'
using_task_library 'velodyne_lidar'

# Drivers
using_task_library 'dsp1760'
using_task_library 'temperature'
using_task_library 'telemetry_telecommand'
#using_task_library 'autonav_interface' # not public

# Control
using_task_library 'motion_translator'
using_task_library 'command_arbiter'
using_task_library 'waypoint_navigation'
using_task_library 'slippage_estimator'
using_task_library 'fdir'

# Processing
using_task_library 'stereo'
using_task_library 'pancam_panorama'
using_task_library 'pancam_360'
using_task_library 'viso2'
using_task_library 'viso2_with_imu'
using_task_library 'viso2_evaluation'
using_task_library 'gps_heading'
using_task_library 'shutter_controller'
using_task_library 'hazard_detector'
using_task_library 'dem_generation'
using_task_library 'camera_trigger'
using_task_library 'cartographer'
using_task_library 'traversability'
using_task_library 'path_planning'
using_task_library 'cost_updating'
#using_task_library 'ga_slam'

# Other
#using_task_library 'transformer'
#using_task_library 'ar_tracking'
#using_task_library 'kinect2'
#using_task_library 'image_preprocessing'
#using_task_library 'projection'
#using_task_library 'localization_frontend'
#using_task_library 'odometry'
using_task_library 'threed_odometry'
#using_task_library 'motion_planning_libraries'
#using_task_library 'traversability_explorer'
#using_task_library 'traversability_loader'
#using_task_library 'trajectory_helpers'
using_task_library 'simulation_vrep'
using_task_library 'odometry_fusion'

######################################################### Deployement definition

deployment 'fdir' do
    task("slippage_estimator", "slippage_estimator::Task")
    task("fdir", "fdir::Task")
end

deployment "navigation" do
    task("waypoint_navigation", "waypoint_navigation::Task")
    task("trajectoryGen", "waypoint_navigation::TrajectoryTest")
    task("command_arbiter", "command_arbiter::Task")
    add_default_logger
end

deployment 'vision' do
    task("velodyne_lidar", "velodyne_lidar::LaserScanner")
    task("tofcamera_mesasr", "tofcamera_mesasr::Task")
    task("camera_firewire_bb2", "camera_firewire::CameraTask")
    task("camera_bb2", "camera_bb2::Task")
    task("camera_firewire_bb3", "camera_firewire::CameraTask")
    task("camera_bb3", "camera_bb3::Task")
    add_default_logger
end

deployment 'stereo' do
    task("stereo_pancam", "stereo::Task")
    task("stereo_pancam_360", "stereo::Task")
    task("stereo_bb2", "stereo::Task")
    task("stereo_bb3", "stereo::Task")
    add_default_logger
end

# Separate deployements so that they would be in their own thread during runtime
deployment 'pancam' do
    task("pancam_left", "camera_firewire::CameraTask")
    task("pancam_right", "camera_firewire::CameraTask")
    task("pancam_panorama", "pancam_panorama::Task")
    task("pancam_360", "pancam_360::Task")
    add_default_logger
end

deployment 'lidar' do
    task("velodyne_lidar", "velodyne_lidar::LaserScanner")
    add_default_logger
end

deployment 'tof' do
    task("tofcamera_mesasr", "tofcamera_mesasr::Task")
    add_default_logger
end

deployment 'bb2' do
    task("camera_firewire_bb2", "camera_firewire::CameraTask")
    task("camera_bb2", "camera_bb2::Task")
    add_default_logger
end

deployment 'bb3' do
    task("camera_firewire_bb3", "camera_firewire::CameraTask")
    task("camera_bb3", "camera_bb3::Task")
    add_default_logger
end

deployment 'pancam_bb3' do
    task("camera_firewire_pancam", "camera_firewire::CameraTask")
    task("camera_pancam", "camera_bb3::Task")
    task("pancam_panorama", "pancam_panorama::Task")
    task("pancam_360", "pancam_360::Task")
    task("stereo_pancam", "stereo::Task")
    task("dem_generation_pancam", "dem_generation::Task")
   add_default_logger
end

deployment 'navcam_bb3' do
    task("camera_firewire_navcam", "camera_firewire::CameraTask")
    task("camera_navcam", "camera_bb3::Task")
    task("navcam_panorama", "pancam_panorama::Task")
    task("navcam_360", "pancam_360::Task")
    task("stereo_navcam", "stereo::Task")
    task("dem_generation_navcam", "dem_generation::Task")
   add_default_logger
end

deployment 'navcam' do
    task("camera_firewire_navcam", "camera_firewire::CameraTask")
    task("camera_navcam", "camera_bb2::Task")
    task("navcam_panorama", "pancam_panorama::Task")
    task("navcam_360", "pancam_360::Task")
    task("stereo_navcam", "stereo::Task")
    task("dem_generation_navcam", "dem_generation::Task")
   add_default_logger
end

deployment 'loccam' do
    task("camera_firewire_loccam", "camera_firewire::CameraTask")
    task("camera_loccam", "camera_bb2::Task")
    task("loccam_panorama", "pancam_panorama::Task")
    task("loccam_360", "pancam_360::Task")
    task("stereo_loccam", "stereo::Task")
    task("dem_generation_loccam", "dem_generation::Task")
   add_default_logger
end

deployment 'imu' do
    task("imu_stim300", "imu_stim300::Task")
    add_default_logger
end

deployment 'gps' do
    task("gps", "gnss_trimble::Task")
    task("gps_heading", "gps_heading::Task")
    task("waypoint_navigation", "waypoint_navigation::Task")
    task("trajectoryGen", "waypoint_navigation::TrajectoryTest")
    task("command_arbiter", "command_arbiter::Task")
    add_default_logger
end

deployment 'gps_heading' do
    task("gps_heading", "gps_heading::Task")
    add_default_logger
end

deployment "shutter_controller" do
    task("shutter_controller_pancam", "shutter_controller::Task")
    task("shutter_controller_bb2", "shutter_controller::Task")
    task("shutter_controller_navcam", "shutter_controller::Task")
    task("shutter_controller_bb3", "shutter_controller::Task")
    add_default_logger
end

#################################################### Deployements for unit tests

deployment "unit_odometry_fusion" do
    task("visual_evaluation", "viso2_evaluation::Task")
    task("inertial_evaluation", "viso2_evaluation::Task")
    task("fusion_evaluation", "viso2_evaluation::Task")
    task("odometry_fusion", "odometry_fusion::Task")
    add_default_logger
end

deployment "unit_visual_odometry" do
    task("viso2_with_imu","viso2_with_imu::Task")
    task("viso2_evaluation","viso2_evaluation::Task")
    task("viso2", "viso2::StereoOdometer")
    add_default_logger
end

deployment "unit_bb2" do
    task("camera_firewire_bb2", "camera_firewire::CameraTask")
    task("camera_bb2", "camera_bb2::Task")
    task("stereo_bb2", "stereo::Task")
    add_default_logger
end

deployment "unit_bb3" do
    task("camera_firewire_bb3", "camera_firewire::CameraTask")
    task("camera_bb3", "camera_bb3::Task")
    task("stereo_bb3", "stereo::Task")
    add_default_logger
end

deployment "unit_pancam" do
    task("pancam_left", "camera_firewire::CameraTask")
    task("pancam_right", "camera_firewire::CameraTask")
    task("stereo_pancam", "stereo::Task")
    add_default_logger
end

deployment "gyro" do
    task("dsp1760", "dsp1760::Task")
    add_default_logger
end

deployment "temperature" do
    task("temperature", "temperature::Task")
    add_default_logger
end

deployment "unit_shutter_controller" do
    task("shutter_controller", "shutter_controller::Task")
    add_default_logger
end

deployment "unit_pancam_shutter_controller" do
    task("pancam_left", "camera_firewire::CameraTask")
    task("pancam_right", "camera_firewire::CameraTask")
    task("stereo_pancam", "stereo::Task")
    task("shutter_controller", "shutter_controller::Task")
    add_default_logger
end

deployment "unit_bumblebee_shutter_controller" do
    task("bb2", "camera_firewire::CameraTask")
    task("bb3", "camera_firewire::CameraTask")
    task("camera_bb2", "camera_bb2::Task")
    task("camera_bb3", "camera_bb3::Task")
    task("shutter_controller_bb2", "shutter_controller::Task")
    task("shutter_controller_bb3", "shutter_controller::Task")
    add_default_logger
end

deployment "unit_hazard_detector" do
    task("hazard_detector", "hazard_detector::Task")
    add_default_logger
end

deployment 'tmtchandling' do
    task("telemetry_telecommand", "telemetry_telecommand::Task")
    task("trigger_lidar", "camera_trigger::Task")
    task("trigger_tof", "camera_trigger::Task")
    task("trigger_navcam", "camera_trigger::Task")
    task("trigger_hazcam", "camera_trigger::Task")
    task("trigger_loccam", "camera_trigger::Task")
    task("trigger_pancam", "camera_trigger::Task")
    task("trigger_pancam_360", "camera_trigger::Task")
    add_default_logger
end

deployment 'dem_generation' do
    task("dem_generation_lidar", "dem_generation::Task")
    task("dem_generation_tof", "dem_generation::Task")
    task("dem_generation_bb2", "dem_generation::Task")
    task("dem_generation_bb3", "dem_generation::Task")
    task("dem_generation_pancam", "dem_generation::Task")
    task("dem_generation_pancam_360", "dem_generation::Task")
    task("dem_generation_panoramica", "dem_generation::Task")
    add_default_logger
end

######################################################## Deprecated deployements

# Ground Truth
deployment "groundtruth" do
    task("vicon", "vicon::Task").periodic(0.01)
    task("gnss_trimble", "gnss_trimble::Task").periodic(0.1)
    add_default_logger
end

deployment "unit_vicon" do
    task("vicon", "vicon::Task").periodic(0.05)
end

# Autonomy related tasks
#deployment "autonomy_legacy" do
#   task("cartographer","cartographer::Task")
#   task("path_planner", "motion_planning_libraries::Task")
#   task("traversability", "traversability_explorer::Task")
#   task("traversability_loader", "traversability_loader::Task")
#   task("goal_set", "trajectory_helpers::GoalGenerator")
#   task("trajectory_refiner", "trajectory_helpers::TrajectoryRefiner")
#   task("pose_est", "simple_pose::Task")
#   add_default_logger
#end

deployment "autonomy" do
   task("cartographer","cartographer::Task")
   task("path_planner", "path_planning::Task")
   task("cost_updating", "cost_updating::Task")
   #task("ga_slam", "ga_slam::Task")
   task("traversability", "traversability::Task")
   #task("autonav_interface", "autonav_interface::Task") # not public
   #task("traversability_loader", "traversability_loader::Task")
   #task("goal_set", "trajectory_helpers::GoalGenerator")
   #task("trajectory_refiner", "trajectory_helpers::TrajectoryRefiner")
   add_default_logger
end

deployment "simulation" do
    task("simulation","simulation_vrep::Task")
end

